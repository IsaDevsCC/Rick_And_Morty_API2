Index: app/src/main/java/com/example/rickandmorty/presentation/adding/AddNewCharacterFragmentCompose.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rickandmorty.presentation.adding\n\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.fragment.app.Fragment\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.Button\nimport androidx.compose.material.Text\nimport androidx.compose.material.TextField\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.alpha\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.style.TextDecoration\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.rickandmorty.databinding.FragmentAddNewCharacterBinding\nimport com.example.rickandmorty.domain.model.CharacterModelAdd\nimport com.example.rickandmorty.theme.fonts\nimport org.koin.androidx.viewmodel.ext.android.viewModel\n\nclass AddNewCharacterFragmentCompose : Fragment() {\n\n    private lateinit var binding : FragmentAddNewCharacterBinding\n    private val viewModel : AddNewCharacterViewModelCompose by viewModel()\n    \n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?\n    ): View {\n\n        binding = FragmentAddNewCharacterBinding.inflate(layoutInflater)\n        \n        return binding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        binding.cvAdd.setContent { \n            PrintScreen()\n        }\n    }\n\n    @Composable\n    private fun PrintScreen() {\n        var name by remember { mutableStateOf(TextFieldValue()) }\n        var status by remember { mutableStateOf(TextFieldValue()) }\n        var specie by remember { mutableStateOf(TextFieldValue()) }\n        var gender by remember { mutableStateOf(TextFieldValue()) }\n\n        Column(\n            modifier = Modifier.padding(20.dp),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n\n            GetText(string = \"Name\")\n            Space()\n            //GetTextField(name)\n            TextField(\n                value = name,\n                onValueChange = { name = it },\n                modifier = Modifier\n                    .alpha(0.8F)\n                    .background(Color.White),\n                placeholder = { Text(text = \"Name\") }\n            )\n            Space()\n            GetText(string = \"Status\")\n            Space()\n            TextField(\n                value = status,\n                onValueChange = { status = it },\n                modifier = Modifier\n                    .alpha(0.8F)\n                    .background(Color.White),\n                placeholder = { Text(text = \"Status\") }\n            )\n            Space()\n            GetText(string = \"Specie\")\n            Space()\n            TextField(\n                value = specie,\n                onValueChange = { specie = it },\n                modifier = Modifier\n                    .alpha(0.8F)\n                    .background(Color.White),\n                placeholder = { Text(text = \"Specie\") }\n            )\n            Space()\n            GetText(string = \"Gender\")\n            Space()\n            TextField(\n                value = gender,\n                onValueChange = { gender = it },\n                modifier = Modifier\n                    .alpha(0.8F)\n                    .background(Color.White),\n                placeholder = { Text(text = \"Gender\") }\n            )\n            Space()\n            Space()\n\n            if (name.text.isNotEmpty() || status.text.isNotEmpty() || specie.text.isNotEmpty() || gender.text.isNotEmpty()) {\n                val photo = \"https://rickandmortyapi.com/api/character/avatar/183.jpeg\"\n                val character = CharacterModelAdd(name.text, status.text, specie.text, gender.text, photo, false)\n                ButtonRegister(character)\n            }\n        }\n    }\n\n    @Composable\n    private fun Space() = Spacer(\n        modifier = Modifier.height(15.dp)\n    )\n\n    @Composable\n    private fun GetText(string : String) {\n        Text(\n            text = string,\n            style = TextStyle(\n                fontSize = 32.sp,\n                fontFamily = fonts,\n            )\n        )\n    }\n\n    /*@Composable\n    private fun GetTextField(string: TextFieldValue) {\n        TextField(\n            value = string,\n            onValueChange = { string = it },\n            modifier = Modifier\n                .alpha(0.8F)\n                .background(Color.White),\n            placeholder = { Text(text = \"Name\") }\n        )\n    }*/\n\n    @Composable\n    fun ButtonRegister(characterModel: CharacterModelAdd) = Box(\n        modifier = Modifier\n            .padding(40.dp, 0.dp, 40.dp, 0.dp)) {\n        Button(onClick = {\n            onClicked(characterModel)\n        },\n            shape = RoundedCornerShape(50.dp),\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(60.dp)\n        ) {b\n            Text(\n                text = \"Add\",\n                style = TextStyle(\n                    fontSize = 20.sp,\n                    fontFamily = fonts,\n                    textDecoration = TextDecoration.None,\n                    color = Color.White\n                )\n            )\n        }\n    }\n\n    private fun onClicked(characterModel: CharacterModelAdd) {\n        Log.i(\"PUSHED\", \"PRESIONADO DESDE COMPOSE\")\n        viewModel.character.observe(viewLifecycleOwner){\n        }\n        viewModel.addNewCharacter(characterModel)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rickandmorty/presentation/adding/AddNewCharacterFragmentCompose.kt b/app/src/main/java/com/example/rickandmorty/presentation/adding/AddNewCharacterFragmentCompose.kt
--- a/app/src/main/java/com/example/rickandmorty/presentation/adding/AddNewCharacterFragmentCompose.kt	(revision e5dad7b881d54baf3068e20b2a01364bbfaec004)
+++ b/app/src/main/java/com/example/rickandmorty/presentation/adding/AddNewCharacterFragmentCompose.kt	(date 1691702037928)
@@ -165,7 +165,7 @@
             modifier = Modifier
                 .fillMaxWidth()
                 .height(60.dp)
-        ) {b
+        ) {
             Text(
                 text = "Add",
                 style = TextStyle(
